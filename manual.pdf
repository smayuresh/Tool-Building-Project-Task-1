# Enhanced Bug Report Classifier - User Manual

## Table of Contents

1. [Introduction](#introduction)
2. [Installation](#installation)
3. [Basic Usage](#basic-usage)
4. [Advanced Usage](#advanced-usage)
5. [Configuration](#configuration)
6. [Troubleshooting](#troubleshooting)

## Introduction

The Enhanced Bug Report Classifier is a machine learning system designed to automatically identify performance-related bug reports in deep learning frameworks. This manual provides detailed instructions on how to set up and use the classifier effectively.

## Installation

### Prerequisites
- Python 3.9 or higher
- pip package manager

### Step-by-Step Installation

1. Clone the repository:
```bash
git clone https://github.com/smayuresh/Tool-Building-Project-Task-1.git
cd Tool-Building-Project-Task-1
```

2. Create and activate a virtual environment:
```bash
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate
```

3. Install dependencies:
```bash
pip install -r requirements.txt
```

## Basic Usage

### Using as a Module

```python
from src.ensemble_classifier import EnhancedBugReportClassifier

# Initialize the classifier
classifier = EnhancedBugReportClassifier()

# Load and preprocess your data
import pandas as pd
data = pd.read_csv("your_dataset.csv")

# Train the classifier
classifier.train(data)

# Evaluate the classifier
metrics = classifier.evaluate(data)
```

### Command Line Interface

Run experiments across multiple frameworks:

```bash
python src/evaluate.py [--project PROJECT] [--n_iterations N] [--output_dir DIR]
```

Available arguments:
- `--project`: Specific project to evaluate (default: all projects)
- `--n_iterations`: Number of evaluation iterations (default: 30)
- `--output_dir`: Directory to save results (default: 'results')

Example:
```bash
python src/evaluate.py --project tensorflow --n_iterations 50
```

## Advanced Usage

### Custom Feature Engineering

You can enhance the feature engineering process by modifying the feature weights:

```python
classifier = EnhancedBugReportClassifier(
    title_weight=2.0,  # Emphasize title importance
    body_weight=1.0,   # Standard weight for body
    comments_weight=0.5  # Reduce impact of comments
)
```

### Ensemble Configuration

The classifier uses an ensemble of multiple classifiers. You can configure individual classifiers:

```python
classifier = EnhancedBugReportClassifier(
    use_naive_bayes=True,
    use_random_forest=True,
    use_xgboost=True,
    use_lightgbm=True
)
```

### Saving and Loading Models

To save and load trained models:

```python
# Save the trained model
classifier.save_model('trained_model.pkl')

# Load the model later
loaded_classifier = EnhancedBugReportClassifier.load_model('trained_model.pkl')
```

## Configuration

### Preprocessing Options
- `use_stemming`: Whether to apply stemming (default: True)
- `use_lemmatization`: Whether to apply lemmatization (default: False)

### Feature Extraction Options
- `tfidf_ngram_range`: Range of n-grams for TF-IDF (default: (1, 3))
- `tfidf_max_features`: Maximum number of features for TF-IDF (default: 10000)
- `min_df`: Minimum document frequency (default: 2)
- `max_df`: Maximum document frequency (default: 0.95)

### Classifier Options
- `class_prior`: Prior probabilities for Naive Bayes (default: [0.3, 0.7])
- `n_estimators`: Number of trees for Random Forest (default: 200)
- `max_depth`: Maximum depth for Random Forest (default: 15)
- `scale_pos_weight`: Class weight for XGBoost (default: 8)
- `class_weight`: Class weight for LightGBM (default: 'balanced')

## Troubleshooting

### Common Issues

1. **LightGBM Warnings**:
   - Warning: "No further splits with positive gain"
   - This is expected and doesn't affect performance

2. **Memory Issues**:
   - Solution: Reduce batch size or use smaller feature set
   - Adjust `tfidf_max_features` parameter

3. **Performance Issues**:
   - Solution: Use parallel processing
   - Optimize feature extraction
   - Reduce model complexity

4. **Dataset Format Issues**:
   - Ensure your dataset has required columns
   - Check for missing values
   - Verify data types

### Performance Tips

1. **Balancing Speed and Accuracy**:
   - For faster processing: Reduce feature set size
   - For better accuracy: Increase feature set size

2. **Memory Optimization**:
   - Process datasets in chunks
   - Use smaller feature sets
   - Enable parallel processing

3. **Improving Results**:
   - Adjust class weights
   - Modify feature weights
   - Tune classifier parameters

### Getting Help

If you encounter issues not covered in this manual, please check the GitHub repository for updates or open an issue with the details of your problem. 